/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 /*       36 KEY MATRIX / LAYOUT MAPPING
  ╭────────────────────┬────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ 33  34  35 ╭───────╯
          ╰────────────┴────────────╯        */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE 0
#define M_BASE 1
#define LOWER 2
#define M_LOWER 3
#define RAISE 4
#define M_RAISE 5
#define ADJUST 6
#define M_ADJUST 7

&lt {
    tapping-term-ms = <150>;
    flavor = "hold-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_gui {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp LGUI>;
            layers = <BASE>;
        };
        combo_ctrl {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp LCTRL>;
            layers = <M_BASE>;
        };
        combo_caps {
            timeout-ms = <150>;
            key-positions = <20 29>;
            bindings = <&kp CAPS>;
            layers = <BASE M_BASE>;
        };
    };

    behaviors {
        lp: long_press {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1>;
            label = "long press";
        };
        custom_p: custom_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LS(N8)>, <&kp LS(N9)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "custom parenthesis";
        };
        custom_gt: custom_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NUBS>, <&kp LS(NUBS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "custom greater than";
        };
        custom_gt_m: custom_gt_m {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp LS(GRAVE)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "custom greater than mac";
        };
        custom_bk: custom_bracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LBKT)>, <&kp RA(RBKT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "custom bracket";
        };
        custom_b: custom_brace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(SQT)>, <&kp RA(NUHS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "custom brace";
        };
        swap_w: tri-state-window {
            compatible = "zmk,behavior-tri-state";
            label = "swap window";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <27>;
        };
        swap_t: tri-state-tab {
            compatible = "zmk,behavior-tri-state";
            label = "swap tab";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
            ignored-key-positions = <39>;
        };
        swap_t_p: tri-state-window-prev {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(TAB))>, <&kp LS(TAB)>;
            mods = <MOD_LCTL>;
            keep-mods = <MOD_LCTL>;
            label = "swap tab prev";
        };
    };

   // Activate ADJUST layers by pressing raise and lower
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
        adjust_layer_m {
            if-layers = <M_LOWER M_RAISE>;
            then-layer = <M_ADJUST>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";
// ------------------------------------------------------------------------------------------------------------
// |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |   I   |  O   |   P   |
// |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |   K   |  L   |  Ñ   | 
// |Z/SHIFT|X/ALT| C  |  V   |  B   |                   |  N   |  M    |   ,   | ./ATL|-/SHIFT|
//               | CTRL/ESC | LOWER/TAB|  SPACE |  | ENTER | RAISE/BKSPC| DEL  |
            bindings = <
&kp Q &kp W    &kp E    &kp R     &kp T                            &kp Y  &kp U     &kp I     &kp O    &kp P
&kp A  &kp S    &kp D    &kp F     &kp G                           &kp H  &kp J     &kp K     &kp L   &lp SEMI SQT
&mt LSHIFT Z  &mt LALT X    &kp C    &kp V  &kp B                  &kp N  &kp M     &kp COMMA &mt LALT DOT  &mt RSHFT FSLH
            &mt LCTRL ESC &lt LOWER TAB &kp SPACE                  &kp RET  &lt RAISE BSPC &kp DEL
            >;
        };
        default_layer_m {
            label = "m_default";
// ------------------------------------------------------------------------------------------------------------
// |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |   I   |  O   |   P   |
// |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |   K   |  L   |  Ñ   |
// |Z/SHIFT|X/ALT| C  |  V   |  B   |                   |  N   |  M    |   ,   | ./ATL|-/SHIFT|
//                         | CTRL/ESC | LOWER/TAB|  SPACE |  | ENTER | RAISE/BKSPC| DEL  |
            bindings = <
&kp Q &kp W    &kp E    &kp R     &kp T                            &kp Y  &kp U     &kp I     &kp O    &kp P
&kp A  &kp S    &kp D    &kp F     &kp G                           &kp H  &kp J     &kp K     &kp L   &lp SEMI SQT
&mt LSHIFT Z  &mt LALT X    &kp C    &kp V  &kp B                  &kp N  &kp M     &kp COMMA &mt LALT DOT  &mt RSHFT FSLH
                                  &mt LGUI ESC &lt M_LOWER TAB &kp SPACE    &kp RET  &lt M_RAISE BSPC &kp DEL
            >;
        };

        lower_layer {
            label = "lower";
// ------------------------------------------------------------------------------------------------------------
// |VOLU | MUTE|PRV_WPC|NXT_WPC|    |                   |  &   |  /    |  (    |  )   |   =   |
// | VOLD | PLAY | prev_w | swap_w |  '   |                   |  !   |  <    |  {    |  [   |   ?   |
// | SHIFT|     | prev_t | swap_t |  `   |                   |  +   |  "    |  ;    |  :   |   _   |
//                            |      |      |        |  |       |     | WORD_DEL |
// ------------------------------------------------------------------------------------------------------------
            bindings = <
&kp C_VOL_UP &kp C_MUTE &kp LC(LG(LEFT)) &kp LC(LG(RIGHT)) &trans      &kp LS(N6) &kp LS(N7) &custom_p &kp LS(N9)  &kp LS(N0)
&kp C_VOL_DN &kp C_PP &kp LS(TAB) &swap_w  &kp MINUS                     &kp LS(N1) &custom_gt  &custom_b &custom_bk &kp LS(MINUS)
&kp LSHFT &trans    &swap_t_p &swap_t  &kp LBKT                          &kp RBKT &kp LS(N2) &kp LS(COMMA) &kp LS(DOT) &kp LS(FSLH)
                                   &trans    &trans  &trans &trans  &lt RAISE LC(BSPC)  &kp LC(DEL)
            >;
        };
        lower_layer_m {
            label = "m_lower";
// ------------------------------------------------------------------------------------------------------------
// |VOLU | MUTE|PRV_WPC|NXT_WPC|      |                   |  &   |  /    |  (    |  )   |   =   |
// | VOLD | PLAY | prev_w | swap_w |  '   |                   |  !   |  <    |  {    |  [   |   ?   |
// | SHIFT|     | prev_t | swap_t |  `   |                   |  +   |  "    |  ;    |  :   |   _   |
//                            |      |      |        |  |       |     | WORD_DEL |
// ------------------------------------------------------------------------------------------------------------

            bindings = <
&kp C_VOL_UP &kp C_MUTE &kp LC(LG(LEFT)) &kp LC(LG(RIGHT)) &trans   &kp LS(N6) &kp LS(N7) &custom_p &kp LS(N9)  &kp LS(N0)
&kp C_VOL_DN &kp C_PP &kp LS(TAB) &swap_w  &kp MINUS                   &kp LS(N1) &custom_gt_m &custom_b &custom_bk &kp LS(MINUS)
&kp LSHFT &trans    &swap_t_p &swap_t  &kp LBKT                        &kp RBKT &kp LS(N2) &kp LS(COMMA) &kp LS(DOT) &kp LS(FSLH)
                                       &trans    &trans  &trans &trans  &lt M_RAISE LA(BSPC)  &kp LA(DEL)
            >;
        };

        raise_layer {
            label = "raise";
// ------------------------------------------------------------------------------------------------------------
// |   |  |   @  |   #   |   $   |   %  |                |      |PRVWD |   ^   |NXTWD |       |
// |      |      |       |       |      |                |      |   <- |   v   |  ->  |       |
// |      |      |       |       |      |                |      | HOME |       | END  |       |
//                               |       |      |      |  |      |      |      |
            bindings = <
&kp RA(N1)   &kp RA(N2)   &kp RA(N3)  &kp LS(N4)   &kp LS(N5)                 &trans   &kp LC(LEFT) &kp UP &kp LC(RIGHT) &trans 
&trans      &trans       &trans      &trans       &trans                      &trans   &kp LEFT   &kp DOWN &kp RIGHT   &trans
&trans      &trans       &trans      &trans       &trans                      &trans  &kp HOME    &trans   &kp END    &trans 
                        &trans       &trans      &trans                       &trans  &trans    &trans
            >;
        };
        raise_layer_m {
            label = "m_raise";
// ------------------------------------------------------------------------------------------------------------
// |   |  |   @  |   #   |   $   |   %  |                |      |PRVWD |   ^   |NXTWD |       |
// |      |      |       |       |      |                |      |   <- |   v   |  ->  |       |
// |      |      |       |       |      |                |      | HOME |       | END  |       |
//                               |       |      |      |  |      |      |      |
            bindings = <
&kp RA(N1)   &kp RA(N2)   &kp RA(N3)  &kp LS(N4)   &kp LS(N5)                  &trans   &kp LA(LEFT) &kp UP &kp LA(RIGHT) &trans
&trans       &trans       &trans      &trans       &trans                      &trans   &kp LEFT   &kp DOWN &kp RIGHT   &trans
&trans       &trans       &trans      &trans       &trans                    &trans  &kp RG(LEFT)    &trans   &kp RG(RIGHT)    &trans
                         &trans       &trans        &trans                 &trans  &trans    &trans
            >;
        };

        adjust_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// |   ¡     |  WIN    |    €    |         |    ¿    |                 |      |   7  |   8   |  9   |   0   |
// |   \     |  MAC    |        |  EXTPWR |  BTCLR  |                  |      |   4  |   5   |  6   |   ~   |
// |  BT1   |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |   1  |   2   |  3   |       |
//                              |         |         |         | |      |      |      |
            label = "adjust";
            bindings = <
&kp EQUAL     &to BASE    &kp RA(N5)   &none       &kp PLUS                              &none &kp N7 &kp N8 &kp N9 &kp N0
&kp RA(GRAVE) &to M_BASE  &none  &ext_power EP_OFF &bt BT_CLR                            &none &kp N4 &kp N5 &kp N6 &kp RA(N4)
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                      &none  &kp N1 &kp N2 &kp N3 &none
                                  &none   &none   &none           &none  &none &none 
            >;
        };
        adjust_layer_m {
// ----------------------------------------------------------------------------------------------------------------------------
// |   !     |  WIN    |    €    |         |    ¿    |                  |      |   7  |   8   |  9   |   0   |
// |   \     |  MAC    |         |  EXTPWR |  BTCLR  |                  |      |   4  |   5   |  6   |   ~   |
// |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |   1  |   2   |  3   |       |
//                               |         |         |         | |      |      |      |
            label = "adjust_m";
             bindings = <
&kp EQUAL     &to BASE    &kp RA(N5)   &none       &kp PLUS                              &none &kp N7 &kp N8 &kp N9 &kp N0
&kp BSLH     &to M_BASE  &none  &ext_power EP_OFF &bt BT_CLR                            &none &kp N4 &kp N5 &kp N6 &kp RA(SEMI)
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                      &none  &kp N1 &kp N2 &kp N3 &none
                                  &none   &none   &none           &none  &none &none 
            >;
        };

    };
};
